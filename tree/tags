!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Clear	Tree.cpp	/^void Tree::Clear(){$/;"	f	class:Tree
Height	Tree.cpp	/^int Tree::Height(){$/;"	f	class:Tree
InsertChildren	Tree.cpp	/^void TreeNode::InsertChildren(TreeNode& node){$/;"	f	class:TreeNode
IsEmpty	Tree.cpp	/^bool Tree::IsEmpty()const{$/;"	f	class:Tree
IsRoot	Tree.cpp	/^bool Tree::IsRoot(Iterator it){$/;"	f	class:Tree
Iterator	Tree.cpp	/^Iterator::Iterator(){$/;"	f	class:Iterator
Iterator	Tree.cpp	/^Iterator::Iterator(Tree * t, list<TreeNode*>::iterator lt){$/;"	f	class:Iterator
Iterator	Tree.cpp	/^Iterator::Iterator(Tree* t, TreeNode* n){$/;"	f	class:Iterator
Iterator	Tree.cpp	/^Iterator::Iterator(const Iterator& it){$/;"	f	class:Iterator
Iterator	Tree.h	/^class Iterator{$/;"	c
LIt	Tree.h	/^   list<TreeNode*>::iterator LIt; \/\/一个节点迭代器$/;"	m	class:Tree
Leaves	Tree.cpp	/^int Tree::Leaves(){$/;"	f	class:Tree
List	Tree.h	/^    typedef list<TreeNode*>::iterator List;$/;"	t	class:Iterator
List	Tree.h	/^typedef list<TreeNode*> List; \/\/重命名一个节点链表$/;"	t
NumChildren	Tree.cpp	/^int Tree::NumChildren(Iterator it){$/;"	f	class:Tree
Parent	Tree.cpp	/^Iterator Tree::Parent(Iterator it){$/;"	f	class:Tree
Root	Tree.cpp	/^int Tree::Root()const{$/;"	f	class:Tree
SetParent	Tree.cpp	/^void TreeNode::SetParent(TreeNode& node){$/;"	f	class:TreeNode
Size	Tree.cpp	/^int Tree::Size()const{$/;"	f	class:Tree
Tree	Tree.cpp	/^Tree::Tree(){$/;"	f	class:Tree
Tree	Tree.cpp	/^Tree::Tree(const Tree &t){$/;"	f	class:Tree
Tree	Tree.cpp	/^Tree::Tree(const int type){$/;"	f	class:Tree
Tree	Tree.cpp	/^Tree::Tree(const int type,const list<Tree*>& lit){$/;"	f	class:Tree
Tree	Tree.h	/^class Tree{$/;"	c
TreeNode	Tree.cpp	/^TreeNode::TreeNode(int type= 0,TreeNode* Parent = 0){$/;"	f	class:TreeNode
TreeNode	Tree.h	/^struct TreeNode{$/;"	s
_children	Tree.h	/^   List _children;             \/\/子节点$/;"	m	struct:TreeNode
_data	Tree.h	/^   int _data;                  \/\/数据$/;"	m	struct:TreeNode
_lit	Tree.h	/^    list<TreeNode*>::iterator _lit; \/\/List Iterator$/;"	m	class:Iterator
_nodes	Tree.h	/^   list<TreeNode*> _nodes;         \/\/节点数组$/;"	m	class:Tree
_parent	Tree.h	/^   TreeNode* _parent;          \/\/父节点$/;"	m	struct:TreeNode
_tree	Tree.h	/^    Tree* _tree;                     \/\/Tree data$/;"	m	class:Iterator
begin	Tree.cpp	/^Iterator Tree::begin(){$/;"	f	class:Tree
clone	Tree.cpp	/^TreeNode* clone(TreeNode* node,List& nodes,TreeNode* nodep){$/;"	f
end	Tree.cpp	/^Iterator Tree::end(){$/;"	f	class:Tree
height	Tree.cpp	/^int Tree::height(TreeNode* node){$/;"	f	class:Tree
isLeaf	Tree.cpp	/^bool Tree::isLeaf(Iterator it){$/;"	f	class:Tree
operator !	Tree.cpp	/^bool Iterator::operator !(){$/;"	f	class:Iterator
operator !=	Tree.cpp	/^bool Iterator::operator !=(const Iterator & it){$/;"	f	class:Iterator
operator !=	Tree.cpp	/^bool Tree::operator !=(const Tree& t){$/;"	f	class:Tree
operator *	Tree.cpp	/^int Iterator::operator *() const{$/;"	f	class:Iterator
operator ++	Tree.cpp	/^Iterator Iterator::operator ++(int){$/;"	f	class:Iterator
operator ++	Tree.cpp	/^Iterator& Iterator::operator ++(){$/;"	f	class:Iterator
operator =	Tree.cpp	/^Tree& Tree::operator =(const Tree & t){$/;"	f	class:Tree
operator =	Tree.cpp	/^void Iterator::operator =(const Iterator & it){$/;"	f	class:Iterator
operator ==	Tree.cpp	/^bool Iterator::operator ==(const Iterator & it){$/;"	f	class:Iterator
operator ==	Tree.cpp	/^bool Tree::operator ==(const Tree& t){$/;"	f	class:Tree
~Tree	Tree.cpp	/^Tree::~Tree(){$/;"	f	class:Tree
